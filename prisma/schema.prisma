// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

//them moi user
model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    avatar        String?
    accounts      Account[]
    sessions      Session[]
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
    gender        String?
    image         String?

    listings    Listing[]
    transaction transaction[]
    review      review[]
    booking     booking[]
    wishList    wishList[]
}

model Listing {
    id             String   @id @default(cuid())
    hostId         String
    name           String
    address        String
    priceLongTerm  Float
    priceShortTerm Float
    gallery        String   @db.LongText
    desc           String   @db.LongText
    beds           Int
    bedsrooms      Int
    bathrooms      Int
    guests         Int
    active         Boolean  @default(true)
    detail         String   @db.LongText
    placeId        String
    province       String
    approved       Boolean
    district       String
    latitude       Float
    longitude      Float
    ward           String
    destination    String
    createdAt      DateTime @default(now())
    updatedAt      DateTime @updatedAt

    host           User             @relation(fields: [hostId], references: [id])
    location       place            @relation(fields: [placeId], references: [id])
    booking        booking[]
    transaction    transaction[]
    review         review[]
    wishList       wishList[]
    ListingAmenity ListingAmenity[]
}

model place {
    id   String @id @default(cuid())
    name String

    Listing Listing[]
}

model booking {
    id          String   @id @default(cuid())
    guestId     String
    listingId   String
    checkIn     DateTime
    checkOut    DateTime
    total       Float
    phoneNumber String
    guest       Int
    isDenied    Boolean
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    review      String   @db.Text
    rating      Int
    booked      Listing  @relation(fields: [listingId], references: [id])
    guests      User     @relation(fields: [guestId], references: [id])
}

model transaction {
    guestId   String
    listingId String
    checkIn   DateTime
    checkOut  DateTime
    price     String
    guest     Int
    review    String   @db.Text
    rating    Int

    listings Listing @relation(fields: [listingId], references: [id])
    guests   User    @relation(fields: [guestId], references: [id])

    @@id([guestId, listingId])
}

model review {
    guestId   String
    listingId String
    comment   String @db.Text
    rating    Int

    guests   User    @relation(fields: [guestId], references: [id])
    listings Listing @relation(fields: [listingId], references: [id])

    @@id([guestId, listingId])
}

model wishList {
    id        String
    guestId   String
    listingId String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    guests   User    @relation(fields: [guestId], references: [id])
    listings Listing @relation(fields: [listingId], references: [id])

    @@id([guestId, listingId])
}

model ListingAmenity {
    id        String
    listingId String
    amenityId String

    amenitys Amenity @relation(fields: [amenityId], references: [id])
    listings Listing @relation(fields: [listingId], references: [id])

    @@id([amenityId, listingId])
}

model Amenity {
    id   String @id @default(cuid())
    name String

    ListingAmenity ListingAmenity[]
}
